/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.datamusic.app.model.impl;

import com.datamusic.app.model.UserAccount;
import com.datamusic.app.model.UserAccountModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the UserAccount service. Represents a row in the &quot;datamusic_UserAccount&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>UserAccountModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link UserAccountImpl}.
 * </p>
 *
 * @author Regisson Aguiar
 * @see UserAccountImpl
 * @generated
 */
@JSON(strict = true)
public class UserAccountModelImpl
	extends BaseModelImpl<UserAccount> implements UserAccountModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a user account model instance should use the <code>UserAccount</code> interface instead.
	 */
	public static final String TABLE_NAME = "datamusic_UserAccount";

	public static final Object[][] TABLE_COLUMNS = {
		{"mvccVersion", Types.BIGINT}, {"uuid_", Types.VARCHAR},
		{"userAccountId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"userNameAccount", Types.VARCHAR}, {"userFirstName", Types.VARCHAR},
		{"userLastName", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("mvccVersion", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("userAccountId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("userNameAccount", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("userFirstName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("userLastName", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table datamusic_UserAccount (mvccVersion LONG default 0 not null,uuid_ VARCHAR(75) null,userAccountId LONG not null primary key,companyId LONG,createDate DATE null,modifiedDate DATE null,userNameAccount VARCHAR(75) null,userFirstName VARCHAR(75) null,userLastName VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP =
		"drop table datamusic_UserAccount";

	public static final String ORDER_BY_JPQL =
		" ORDER BY userAccount.userNameAccount ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY datamusic_UserAccount.userNameAccount ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long USERACCOUNTID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long USERFIRSTNAME_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long USERLASTNAME_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long USERNAMEACCOUNT_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 32L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public UserAccountModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _userAccountId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setUserAccountId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _userAccountId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return UserAccount.class;
	}

	@Override
	public String getModelClassName() {
		return UserAccount.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<UserAccount, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<UserAccount, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<UserAccount, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((UserAccount)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<UserAccount, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<UserAccount, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(UserAccount)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<UserAccount, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<UserAccount, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<UserAccount, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<UserAccount, Object>>
				attributeGetterFunctions =
					new LinkedHashMap<String, Function<UserAccount, Object>>();

			attributeGetterFunctions.put(
				"mvccVersion", UserAccount::getMvccVersion);
			attributeGetterFunctions.put("uuid", UserAccount::getUuid);
			attributeGetterFunctions.put(
				"userAccountId", UserAccount::getUserAccountId);
			attributeGetterFunctions.put(
				"companyId", UserAccount::getCompanyId);
			attributeGetterFunctions.put(
				"createDate", UserAccount::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", UserAccount::getModifiedDate);
			attributeGetterFunctions.put(
				"userNameAccount", UserAccount::getUserNameAccount);
			attributeGetterFunctions.put(
				"userFirstName", UserAccount::getUserFirstName);
			attributeGetterFunctions.put(
				"userLastName", UserAccount::getUserLastName);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map<String, BiConsumer<UserAccount, Object>>
			_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<UserAccount, ?>> attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<UserAccount, ?>>();

			attributeSetterBiConsumers.put(
				"mvccVersion",
				(BiConsumer<UserAccount, Long>)UserAccount::setMvccVersion);
			attributeSetterBiConsumers.put(
				"uuid", (BiConsumer<UserAccount, String>)UserAccount::setUuid);
			attributeSetterBiConsumers.put(
				"userAccountId",
				(BiConsumer<UserAccount, Long>)UserAccount::setUserAccountId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<UserAccount, Long>)UserAccount::setCompanyId);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<UserAccount, Date>)UserAccount::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<UserAccount, Date>)UserAccount::setModifiedDate);
			attributeSetterBiConsumers.put(
				"userNameAccount",
				(BiConsumer<UserAccount, String>)
					UserAccount::setUserNameAccount);
			attributeSetterBiConsumers.put(
				"userFirstName",
				(BiConsumer<UserAccount, String>)UserAccount::setUserFirstName);
			attributeSetterBiConsumers.put(
				"userLastName",
				(BiConsumer<UserAccount, String>)UserAccount::setUserLastName);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getMvccVersion() {
		return _mvccVersion;
	}

	@Override
	public void setMvccVersion(long mvccVersion) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_mvccVersion = mvccVersion;
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getUserAccountId() {
		return _userAccountId;
	}

	@Override
	public void setUserAccountId(long userAccountId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userAccountId = userAccountId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalUserAccountId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("userAccountId"));
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getUserNameAccount() {
		if (_userNameAccount == null) {
			return "";
		}
		else {
			return _userNameAccount;
		}
	}

	@Override
	public void setUserNameAccount(String userNameAccount) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userNameAccount = userNameAccount;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUserNameAccount() {
		return getColumnOriginalValue("userNameAccount");
	}

	@JSON
	@Override
	public String getUserFirstName() {
		if (_userFirstName == null) {
			return "";
		}
		else {
			return _userFirstName;
		}
	}

	@Override
	public void setUserFirstName(String userFirstName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userFirstName = userFirstName;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUserFirstName() {
		return getColumnOriginalValue("userFirstName");
	}

	@JSON
	@Override
	public String getUserLastName() {
		if (_userLastName == null) {
			return "";
		}
		else {
			return _userLastName;
		}
	}

	@Override
	public void setUserLastName(String userLastName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userLastName = userLastName;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUserLastName() {
		return getColumnOriginalValue("userLastName");
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(UserAccount.class.getName()));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), UserAccount.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public UserAccount toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, UserAccount>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		UserAccountImpl userAccountImpl = new UserAccountImpl();

		userAccountImpl.setMvccVersion(getMvccVersion());
		userAccountImpl.setUuid(getUuid());
		userAccountImpl.setUserAccountId(getUserAccountId());
		userAccountImpl.setCompanyId(getCompanyId());
		userAccountImpl.setCreateDate(getCreateDate());
		userAccountImpl.setModifiedDate(getModifiedDate());
		userAccountImpl.setUserNameAccount(getUserNameAccount());
		userAccountImpl.setUserFirstName(getUserFirstName());
		userAccountImpl.setUserLastName(getUserLastName());

		userAccountImpl.resetOriginalValues();

		return userAccountImpl;
	}

	@Override
	public UserAccount cloneWithOriginalValues() {
		UserAccountImpl userAccountImpl = new UserAccountImpl();

		userAccountImpl.setMvccVersion(
			this.<Long>getColumnOriginalValue("mvccVersion"));
		userAccountImpl.setUuid(this.<String>getColumnOriginalValue("uuid_"));
		userAccountImpl.setUserAccountId(
			this.<Long>getColumnOriginalValue("userAccountId"));
		userAccountImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		userAccountImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		userAccountImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		userAccountImpl.setUserNameAccount(
			this.<String>getColumnOriginalValue("userNameAccount"));
		userAccountImpl.setUserFirstName(
			this.<String>getColumnOriginalValue("userFirstName"));
		userAccountImpl.setUserLastName(
			this.<String>getColumnOriginalValue("userLastName"));

		return userAccountImpl;
	}

	@Override
	public int compareTo(UserAccount userAccount) {
		int value = 0;

		value = getUserNameAccount().compareTo(
			userAccount.getUserNameAccount());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof UserAccount)) {
			return false;
		}

		UserAccount userAccount = (UserAccount)object;

		long primaryKey = userAccount.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<UserAccount> toCacheModel() {
		UserAccountCacheModel userAccountCacheModel =
			new UserAccountCacheModel();

		userAccountCacheModel.mvccVersion = getMvccVersion();

		userAccountCacheModel.uuid = getUuid();

		String uuid = userAccountCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			userAccountCacheModel.uuid = null;
		}

		userAccountCacheModel.userAccountId = getUserAccountId();

		userAccountCacheModel.companyId = getCompanyId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			userAccountCacheModel.createDate = createDate.getTime();
		}
		else {
			userAccountCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			userAccountCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			userAccountCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		userAccountCacheModel.userNameAccount = getUserNameAccount();

		String userNameAccount = userAccountCacheModel.userNameAccount;

		if ((userNameAccount != null) && (userNameAccount.length() == 0)) {
			userAccountCacheModel.userNameAccount = null;
		}

		userAccountCacheModel.userFirstName = getUserFirstName();

		String userFirstName = userAccountCacheModel.userFirstName;

		if ((userFirstName != null) && (userFirstName.length() == 0)) {
			userAccountCacheModel.userFirstName = null;
		}

		userAccountCacheModel.userLastName = getUserLastName();

		String userLastName = userAccountCacheModel.userLastName;

		if ((userLastName != null) && (userLastName.length() == 0)) {
			userAccountCacheModel.userLastName = null;
		}

		return userAccountCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<UserAccount, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<UserAccount, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<UserAccount, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((UserAccount)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, UserAccount>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					UserAccount.class, ModelWrapper.class);

	}

	private long _mvccVersion;
	private String _uuid;
	private long _userAccountId;
	private long _companyId;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _userNameAccount;
	private String _userFirstName;
	private String _userLastName;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<UserAccount, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((UserAccount)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("mvccVersion", _mvccVersion);
		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("userAccountId", _userAccountId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("userNameAccount", _userNameAccount);
		_columnOriginalValues.put("userFirstName", _userFirstName);
		_columnOriginalValues.put("userLastName", _userLastName);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("mvccVersion", 1L);

		columnBitmasks.put("uuid_", 2L);

		columnBitmasks.put("userAccountId", 4L);

		columnBitmasks.put("companyId", 8L);

		columnBitmasks.put("createDate", 16L);

		columnBitmasks.put("modifiedDate", 32L);

		columnBitmasks.put("userNameAccount", 64L);

		columnBitmasks.put("userFirstName", 128L);

		columnBitmasks.put("userLastName", 256L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private UserAccount _escapedModel;

}