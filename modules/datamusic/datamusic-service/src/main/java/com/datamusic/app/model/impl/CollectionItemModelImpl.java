/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.datamusic.app.model.impl;

import com.datamusic.app.model.CollectionItem;
import com.datamusic.app.model.CollectionItemModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the CollectionItem service. Represents a row in the &quot;datamusic_CollectionItem&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>CollectionItemModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CollectionItemImpl}.
 * </p>
 *
 * @author Regisson Aguiar
 * @see CollectionItemImpl
 * @generated
 */
@JSON(strict = true)
public class CollectionItemModelImpl
	extends BaseModelImpl<CollectionItem> implements CollectionItemModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a collection item model instance should use the <code>CollectionItem</code> interface instead.
	 */
	public static final String TABLE_NAME = "datamusic_CollectionItem";

	public static final Object[][] TABLE_COLUMNS = {
		{"mvccVersion", Types.BIGINT}, {"uuid_", Types.VARCHAR},
		{"collectionItemId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"userAccountId", Types.BIGINT}, {"mediaId", Types.BIGINT},
		{"review", Types.VARCHAR}, {"rating", Types.INTEGER}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("mvccVersion", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("collectionItemId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("userAccountId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("mediaId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("review", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("rating", Types.INTEGER);
	}

	public static final String TABLE_SQL_CREATE =
		"create table datamusic_CollectionItem (mvccVersion LONG default 0 not null,uuid_ VARCHAR(75) null,collectionItemId LONG not null primary key,companyId LONG,createDate DATE null,modifiedDate DATE null,userAccountId LONG,mediaId LONG,review VARCHAR(75) null,rating INTEGER)";

	public static final String TABLE_SQL_DROP =
		"drop table datamusic_CollectionItem";

	public static final String ORDER_BY_JPQL =
		" ORDER BY collectionItem.rating ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY datamusic_CollectionItem.rating ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long RATING_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long USERACCOUNTID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public CollectionItemModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _collectionItemId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCollectionItemId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _collectionItemId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return CollectionItem.class;
	}

	@Override
	public String getModelClassName() {
		return CollectionItem.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<CollectionItem, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<CollectionItem, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CollectionItem, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((CollectionItem)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<CollectionItem, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<CollectionItem, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(CollectionItem)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<CollectionItem, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<CollectionItem, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<CollectionItem, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<CollectionItem, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String, Function<CollectionItem, Object>>();

			attributeGetterFunctions.put(
				"mvccVersion", CollectionItem::getMvccVersion);
			attributeGetterFunctions.put("uuid", CollectionItem::getUuid);
			attributeGetterFunctions.put(
				"collectionItemId", CollectionItem::getCollectionItemId);
			attributeGetterFunctions.put(
				"companyId", CollectionItem::getCompanyId);
			attributeGetterFunctions.put(
				"createDate", CollectionItem::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", CollectionItem::getModifiedDate);
			attributeGetterFunctions.put(
				"userAccountId", CollectionItem::getUserAccountId);
			attributeGetterFunctions.put("mediaId", CollectionItem::getMediaId);
			attributeGetterFunctions.put("review", CollectionItem::getReview);
			attributeGetterFunctions.put("rating", CollectionItem::getRating);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map<String, BiConsumer<CollectionItem, Object>>
			_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<CollectionItem, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap<String, BiConsumer<CollectionItem, ?>>();

			attributeSetterBiConsumers.put(
				"mvccVersion",
				(BiConsumer<CollectionItem, Long>)
					CollectionItem::setMvccVersion);
			attributeSetterBiConsumers.put(
				"uuid",
				(BiConsumer<CollectionItem, String>)CollectionItem::setUuid);
			attributeSetterBiConsumers.put(
				"collectionItemId",
				(BiConsumer<CollectionItem, Long>)
					CollectionItem::setCollectionItemId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<CollectionItem, Long>)CollectionItem::setCompanyId);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<CollectionItem, Date>)
					CollectionItem::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<CollectionItem, Date>)
					CollectionItem::setModifiedDate);
			attributeSetterBiConsumers.put(
				"userAccountId",
				(BiConsumer<CollectionItem, Long>)
					CollectionItem::setUserAccountId);
			attributeSetterBiConsumers.put(
				"mediaId",
				(BiConsumer<CollectionItem, Long>)CollectionItem::setMediaId);
			attributeSetterBiConsumers.put(
				"review",
				(BiConsumer<CollectionItem, String>)CollectionItem::setReview);
			attributeSetterBiConsumers.put(
				"rating",
				(BiConsumer<CollectionItem, Integer>)CollectionItem::setRating);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getMvccVersion() {
		return _mvccVersion;
	}

	@Override
	public void setMvccVersion(long mvccVersion) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_mvccVersion = mvccVersion;
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getCollectionItemId() {
		return _collectionItemId;
	}

	@Override
	public void setCollectionItemId(long collectionItemId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_collectionItemId = collectionItemId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public long getUserAccountId() {
		return _userAccountId;
	}

	@Override
	public void setUserAccountId(long userAccountId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userAccountId = userAccountId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalUserAccountId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("userAccountId"));
	}

	@JSON
	@Override
	public long getMediaId() {
		return _mediaId;
	}

	@Override
	public void setMediaId(long mediaId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_mediaId = mediaId;
	}

	@JSON
	@Override
	public String getReview() {
		if (_review == null) {
			return "";
		}
		else {
			return _review;
		}
	}

	@Override
	public void setReview(String review) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_review = review;
	}

	@JSON
	@Override
	public int getRating() {
		return _rating;
	}

	@Override
	public void setRating(int rating) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_rating = rating;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public int getOriginalRating() {
		return GetterUtil.getInteger(
			this.<Integer>getColumnOriginalValue("rating"));
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(CollectionItem.class.getName()));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), CollectionItem.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public CollectionItem toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, CollectionItem>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CollectionItemImpl collectionItemImpl = new CollectionItemImpl();

		collectionItemImpl.setMvccVersion(getMvccVersion());
		collectionItemImpl.setUuid(getUuid());
		collectionItemImpl.setCollectionItemId(getCollectionItemId());
		collectionItemImpl.setCompanyId(getCompanyId());
		collectionItemImpl.setCreateDate(getCreateDate());
		collectionItemImpl.setModifiedDate(getModifiedDate());
		collectionItemImpl.setUserAccountId(getUserAccountId());
		collectionItemImpl.setMediaId(getMediaId());
		collectionItemImpl.setReview(getReview());
		collectionItemImpl.setRating(getRating());

		collectionItemImpl.resetOriginalValues();

		return collectionItemImpl;
	}

	@Override
	public CollectionItem cloneWithOriginalValues() {
		CollectionItemImpl collectionItemImpl = new CollectionItemImpl();

		collectionItemImpl.setMvccVersion(
			this.<Long>getColumnOriginalValue("mvccVersion"));
		collectionItemImpl.setUuid(
			this.<String>getColumnOriginalValue("uuid_"));
		collectionItemImpl.setCollectionItemId(
			this.<Long>getColumnOriginalValue("collectionItemId"));
		collectionItemImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		collectionItemImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		collectionItemImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		collectionItemImpl.setUserAccountId(
			this.<Long>getColumnOriginalValue("userAccountId"));
		collectionItemImpl.setMediaId(
			this.<Long>getColumnOriginalValue("mediaId"));
		collectionItemImpl.setReview(
			this.<String>getColumnOriginalValue("review"));
		collectionItemImpl.setRating(
			this.<Integer>getColumnOriginalValue("rating"));

		return collectionItemImpl;
	}

	@Override
	public int compareTo(CollectionItem collectionItem) {
		int value = 0;

		if (getRating() < collectionItem.getRating()) {
			value = -1;
		}
		else if (getRating() > collectionItem.getRating()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof CollectionItem)) {
			return false;
		}

		CollectionItem collectionItem = (CollectionItem)object;

		long primaryKey = collectionItem.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<CollectionItem> toCacheModel() {
		CollectionItemCacheModel collectionItemCacheModel =
			new CollectionItemCacheModel();

		collectionItemCacheModel.mvccVersion = getMvccVersion();

		collectionItemCacheModel.uuid = getUuid();

		String uuid = collectionItemCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			collectionItemCacheModel.uuid = null;
		}

		collectionItemCacheModel.collectionItemId = getCollectionItemId();

		collectionItemCacheModel.companyId = getCompanyId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			collectionItemCacheModel.createDate = createDate.getTime();
		}
		else {
			collectionItemCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			collectionItemCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			collectionItemCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		collectionItemCacheModel.userAccountId = getUserAccountId();

		collectionItemCacheModel.mediaId = getMediaId();

		collectionItemCacheModel.review = getReview();

		String review = collectionItemCacheModel.review;

		if ((review != null) && (review.length() == 0)) {
			collectionItemCacheModel.review = null;
		}

		collectionItemCacheModel.rating = getRating();

		return collectionItemCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<CollectionItem, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<CollectionItem, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CollectionItem, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((CollectionItem)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, CollectionItem>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					CollectionItem.class, ModelWrapper.class);

	}

	private long _mvccVersion;
	private String _uuid;
	private long _collectionItemId;
	private long _companyId;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _userAccountId;
	private long _mediaId;
	private String _review;
	private int _rating;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<CollectionItem, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((CollectionItem)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("mvccVersion", _mvccVersion);
		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("collectionItemId", _collectionItemId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("userAccountId", _userAccountId);
		_columnOriginalValues.put("mediaId", _mediaId);
		_columnOriginalValues.put("review", _review);
		_columnOriginalValues.put("rating", _rating);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("mvccVersion", 1L);

		columnBitmasks.put("uuid_", 2L);

		columnBitmasks.put("collectionItemId", 4L);

		columnBitmasks.put("companyId", 8L);

		columnBitmasks.put("createDate", 16L);

		columnBitmasks.put("modifiedDate", 32L);

		columnBitmasks.put("userAccountId", 64L);

		columnBitmasks.put("mediaId", 128L);

		columnBitmasks.put("review", 256L);

		columnBitmasks.put("rating", 512L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private CollectionItem _escapedModel;

}