/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.datamusic.app.model.impl;

import com.datamusic.app.model.Media;
import com.datamusic.app.model.MediaModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Media service. Represents a row in the &quot;datamusic_Media&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>MediaModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link MediaImpl}.
 * </p>
 *
 * @author Regisson Aguiar
 * @see MediaImpl
 * @generated
 */
@JSON(strict = true)
public class MediaModelImpl extends BaseModelImpl<Media> implements MediaModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a media model instance should use the <code>Media</code> interface instead.
	 */
	public static final String TABLE_NAME = "datamusic_Media";

	public static final Object[][] TABLE_COLUMNS = {
		{"mvccVersion", Types.BIGINT}, {"uuid_", Types.VARCHAR},
		{"mediaId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"mediaName", Types.VARCHAR}, {"artist", Types.VARCHAR},
		{"description", Types.VARCHAR}, {"genre", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("mvccVersion", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("mediaId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("mediaName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("artist", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("description", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("genre", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table datamusic_Media (mvccVersion LONG default 0 not null,uuid_ VARCHAR(75) null,mediaId LONG not null primary key,companyId LONG,createDate DATE null,modifiedDate DATE null,mediaName VARCHAR(75) null,artist VARCHAR(75) null,description VARCHAR(75) null,genre VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table datamusic_Media";

	public static final String ORDER_BY_JPQL = " ORDER BY media.mediaName ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY datamusic_Media.mediaName ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ARTIST_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GENRE_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long MEDIAID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long MEDIANAME_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 32L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public MediaModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _mediaId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setMediaId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _mediaId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Media.class;
	}

	@Override
	public String getModelClassName() {
		return Media.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Media, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Media, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Media, Object> attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Media)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Media, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Media, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept((Media)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Media, Object>> getAttributeGetterFunctions() {
		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Media, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<Media, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<Media, Object>> attributeGetterFunctions =
				new LinkedHashMap<String, Function<Media, Object>>();

			attributeGetterFunctions.put("mvccVersion", Media::getMvccVersion);
			attributeGetterFunctions.put("uuid", Media::getUuid);
			attributeGetterFunctions.put("mediaId", Media::getMediaId);
			attributeGetterFunctions.put("companyId", Media::getCompanyId);
			attributeGetterFunctions.put("createDate", Media::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", Media::getModifiedDate);
			attributeGetterFunctions.put("mediaName", Media::getMediaName);
			attributeGetterFunctions.put("artist", Media::getArtist);
			attributeGetterFunctions.put("description", Media::getDescription);
			attributeGetterFunctions.put("genre", Media::getGenre);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map<String, BiConsumer<Media, Object>>
			_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<Media, ?>> attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<Media, ?>>();

			attributeSetterBiConsumers.put(
				"mvccVersion", (BiConsumer<Media, Long>)Media::setMvccVersion);
			attributeSetterBiConsumers.put(
				"uuid", (BiConsumer<Media, String>)Media::setUuid);
			attributeSetterBiConsumers.put(
				"mediaId", (BiConsumer<Media, Long>)Media::setMediaId);
			attributeSetterBiConsumers.put(
				"companyId", (BiConsumer<Media, Long>)Media::setCompanyId);
			attributeSetterBiConsumers.put(
				"createDate", (BiConsumer<Media, Date>)Media::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<Media, Date>)Media::setModifiedDate);
			attributeSetterBiConsumers.put(
				"mediaName", (BiConsumer<Media, String>)Media::setMediaName);
			attributeSetterBiConsumers.put(
				"artist", (BiConsumer<Media, String>)Media::setArtist);
			attributeSetterBiConsumers.put(
				"description",
				(BiConsumer<Media, String>)Media::setDescription);
			attributeSetterBiConsumers.put(
				"genre", (BiConsumer<Media, String>)Media::setGenre);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getMvccVersion() {
		return _mvccVersion;
	}

	@Override
	public void setMvccVersion(long mvccVersion) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_mvccVersion = mvccVersion;
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getMediaId() {
		return _mediaId;
	}

	@Override
	public void setMediaId(long mediaId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_mediaId = mediaId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalMediaId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("mediaId"));
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getMediaName() {
		if (_mediaName == null) {
			return "";
		}
		else {
			return _mediaName;
		}
	}

	@Override
	public void setMediaName(String mediaName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_mediaName = mediaName;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalMediaName() {
		return getColumnOriginalValue("mediaName");
	}

	@JSON
	@Override
	public String getArtist() {
		if (_artist == null) {
			return "";
		}
		else {
			return _artist;
		}
	}

	@Override
	public void setArtist(String artist) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_artist = artist;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalArtist() {
		return getColumnOriginalValue("artist");
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return "";
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_description = description;
	}

	@JSON
	@Override
	public String getGenre() {
		if (_genre == null) {
			return "";
		}
		else {
			return _genre;
		}
	}

	@Override
	public void setGenre(String genre) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_genre = genre;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalGenre() {
		return getColumnOriginalValue("genre");
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(Media.class.getName()));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), Media.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Media toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Media>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		MediaImpl mediaImpl = new MediaImpl();

		mediaImpl.setMvccVersion(getMvccVersion());
		mediaImpl.setUuid(getUuid());
		mediaImpl.setMediaId(getMediaId());
		mediaImpl.setCompanyId(getCompanyId());
		mediaImpl.setCreateDate(getCreateDate());
		mediaImpl.setModifiedDate(getModifiedDate());
		mediaImpl.setMediaName(getMediaName());
		mediaImpl.setArtist(getArtist());
		mediaImpl.setDescription(getDescription());
		mediaImpl.setGenre(getGenre());

		mediaImpl.resetOriginalValues();

		return mediaImpl;
	}

	@Override
	public Media cloneWithOriginalValues() {
		MediaImpl mediaImpl = new MediaImpl();

		mediaImpl.setMvccVersion(
			this.<Long>getColumnOriginalValue("mvccVersion"));
		mediaImpl.setUuid(this.<String>getColumnOriginalValue("uuid_"));
		mediaImpl.setMediaId(this.<Long>getColumnOriginalValue("mediaId"));
		mediaImpl.setCompanyId(this.<Long>getColumnOriginalValue("companyId"));
		mediaImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		mediaImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		mediaImpl.setMediaName(
			this.<String>getColumnOriginalValue("mediaName"));
		mediaImpl.setArtist(this.<String>getColumnOriginalValue("artist"));
		mediaImpl.setDescription(
			this.<String>getColumnOriginalValue("description"));
		mediaImpl.setGenre(this.<String>getColumnOriginalValue("genre"));

		return mediaImpl;
	}

	@Override
	public int compareTo(Media media) {
		int value = 0;

		value = getMediaName().compareTo(media.getMediaName());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Media)) {
			return false;
		}

		Media media = (Media)object;

		long primaryKey = media.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Media> toCacheModel() {
		MediaCacheModel mediaCacheModel = new MediaCacheModel();

		mediaCacheModel.mvccVersion = getMvccVersion();

		mediaCacheModel.uuid = getUuid();

		String uuid = mediaCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			mediaCacheModel.uuid = null;
		}

		mediaCacheModel.mediaId = getMediaId();

		mediaCacheModel.companyId = getCompanyId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			mediaCacheModel.createDate = createDate.getTime();
		}
		else {
			mediaCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			mediaCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			mediaCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		mediaCacheModel.mediaName = getMediaName();

		String mediaName = mediaCacheModel.mediaName;

		if ((mediaName != null) && (mediaName.length() == 0)) {
			mediaCacheModel.mediaName = null;
		}

		mediaCacheModel.artist = getArtist();

		String artist = mediaCacheModel.artist;

		if ((artist != null) && (artist.length() == 0)) {
			mediaCacheModel.artist = null;
		}

		mediaCacheModel.description = getDescription();

		String description = mediaCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			mediaCacheModel.description = null;
		}

		mediaCacheModel.genre = getGenre();

		String genre = mediaCacheModel.genre;

		if ((genre != null) && (genre.length() == 0)) {
			mediaCacheModel.genre = null;
		}

		return mediaCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Media, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Media, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Media, Object> attributeGetterFunction = entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((Media)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Media>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					Media.class, ModelWrapper.class);

	}

	private long _mvccVersion;
	private String _uuid;
	private long _mediaId;
	private long _companyId;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _mediaName;
	private String _artist;
	private String _description;
	private String _genre;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<Media, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Media)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("mvccVersion", _mvccVersion);
		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("mediaId", _mediaId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("mediaName", _mediaName);
		_columnOriginalValues.put("artist", _artist);
		_columnOriginalValues.put("description", _description);
		_columnOriginalValues.put("genre", _genre);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("mvccVersion", 1L);

		columnBitmasks.put("uuid_", 2L);

		columnBitmasks.put("mediaId", 4L);

		columnBitmasks.put("companyId", 8L);

		columnBitmasks.put("createDate", 16L);

		columnBitmasks.put("modifiedDate", 32L);

		columnBitmasks.put("mediaName", 64L);

		columnBitmasks.put("artist", 128L);

		columnBitmasks.put("description", 256L);

		columnBitmasks.put("genre", 512L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Media _escapedModel;

}